version: '1.0.{build}'

image: ubuntu

matrix:
  fast_finish: true

configuration:
  - Debug
  - Release

environment:
  CLANG_VERSION: 6.0
  PYTHON_MAJOR_VERSION: 3
  # 3.7 break Ubuntu if change default python3
  PYTHON_VERSION: ${PYTHON_MAJOR_VERSION}.6
  UPDATE_ALTERNATIVE_PRIORITY: 9999

  matrix:
    - COMPILER: gcc
      COMPILER_CPP: g++
      COMPILER_VERSION: 8

    - COMPILER: clang
      COMPILER_CPP: clang++
      COMPILER_VERSION: ${CLANG_VERSION}

install:
  # Compilers
  - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  - sudo apt-get update -y
  - sudo apt-get install ${COMPILER}-${COMPILER_VERSION} ${COMPILER_CPP}-${COMPILER_VERSION} -y
  - sudo update-alternatives --install /usr/bin/${COMPILER} ${COMPILER} /usr/bin/${COMPILER}-${COMPILER_VERSION} ${UPDATE_ALTERNATIVE_PRIORITY} --slave /usr/bin/${COMPILER_CPP} ${COMPILER_CPP} /usr/bin/${COMPILER_CPP}-${COMPILER_VERSION}

  # Python
  # Ugly hack 16.04
  - sudo add-apt-repository ppa:jonathonf/python-${PYTHON_VERSION}
  - sudo apt-get update -y
  - sudo apt-get install python${PYTHON_VERSION} -y
  - sudo update-alternatives --install /usr/bin/python${PYTHON_MAJOR_VERSION} python${PYTHON_MAJOR_VERSION} /usr/bin/python${PYTHON_VERSION} ${UPDATE_ALTERNATIVE_PRIORITY}
  - sudo apt-get install python${PYTHON_MAJOR_VERSION}-pip -y

  # Install Static analysis + coverage
  - sudo apt-get install gcovr -y
  - sudo apt-get install cppcheck -y
  - sudo apt-get install clang-tidy-${CLANG_VERSION} -y
  - sudo ln -s  /usr/bin/clang-tidy-${CLANG_VERSION} /usr/bin/clang-tidy
  - sudo apt-get install clang-format-${CLANG_VERSION} -y
  - sudo ln -s  /usr/bin/clang-format-${CLANG_VERSION} /usr/bin/clang-format

  - appveyor AddCompilationMessage 'install succeed!'

before_build:
  # Debug logs
  - lsb_release -a
  - ldd --version
  - ld -v
  - ${COMPILER_CPP} -v
  - cmake --version
  - cppcheck --version
  - env

  - git submodule update --init --recursive
  - mkdir build && cd build
  - cmake -DCMAKE_CXX_COMPILER=/usr/bin/${COMPILER_CPP} -DCMAKE_BUILD_TYPE=${CONFIGURATION} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..

build_script:
  - make -j8 VERBOSE=1
  - appveyor AddCompilationMessage 'build succeed!'

after_build:
  - make cppcheck-deprecated
  - |
    make clang-format-xml | grep "<replacement "

    if [ $? -ne 1 ]; then
      echo "Formatting change required by clang-format!"
      exit 1
    fi
  - |
    if [ "${COMPILER}" = "clang" ]; then
      make clang-tidy
    fi

  - appveyor AddCompilationMessage 'static analysis succeed!'

test_script:
  - export GTEST_OUTPUT="xml:gtest_output.xml"
  - ctest -V
  - appveyor AddCompilationMessage 'ctest succeed!'

after_test:
  - ../appveyor/upload_gtest_result --gtest_xml=gtest_output.xml
  - |
    if [ "${CONFIGURATION}" == "Release" ]; then
      ./bin/benchmark_${APPVEYOR_PROJECT_NAME}
      #appveyor PushArtifact Testing/Temporary/LastTest.log # push json?
      appveyor AddCompilationMessage 'benchmark succeed!'
    fi

# - TODO:
# activate gcovr
# report cppcheck
# report benchmark + graph (json + pandas)
# lto release (on hold until 18.04 release on appveyor)
# clean benchmarks
# add benchmark from the presentation
